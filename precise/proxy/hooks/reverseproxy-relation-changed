#!/usr/bin/env python
#
#    reverseproxy-relation-changed - hook for when reverse proxy relation changes
#
#    Copyright (C) 2011  Canonical Ltd.
#    Author: Clint Byrum <clint.byrum@canonical.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import sys
import os
import subprocess
import json
import tempfile
import glob

from shutil import copy2

from socket import getaddrinfo

remote_unit = os.environ.get("JUJU_REMOTE_UNIT")

service_name, _ = remote_unit.split("/")

# TODO: maybe load this from disk for easier customization
template = """
# Generated by juju
# this config needs haproxy-1.1.28 or haproxy-1.2.1

global
    log 127.0.0.1   local0
    log 127.0.0.1   local1 notice
    #log loghost    local0 info
    maxconn 4096
    #chroot /usr/share/haproxy
    user haproxy
    group haproxy
    daemon
    #debug
    #quiet

defaults
    log global
    mode    http
    option  httplog
    option  dontlognull
    retries 3
    option redispatch
    maxconn 2000
    contimeout  5000
    clitimeout  50000
    srvtimeout  50000

listen %s 0.0.0.0:80
    option httpchk *
    balance roundrobin
"""

pound_template = """
## global options:
User		"haproxy"
Group		"haproxy"
## Logging: (goes to syslog by default)
##	0	no logging
##	1	normal
##	2	extended
##	3	Apache-style (common log format)
LogLevel	1
## check backend every X secs:
Alive		30
# Creating Listener
ListenHTTPS
    Address 0.0.0.0
    Port    443
    Cert    "/etc/pound/%s.pem"
    AddHeader "X-Forwarded-Proto: https"
    HeadRemove "X-Forwarded-Proto"
    Client  20
    Service
        BackEnd
            Address 127.0.0.1
            Port 80
        End
    End
End
"""

units = []
p = subprocess.Popen("relation-list", stdout=subprocess.PIPE)
for unit in p.stdout:
    units.append(unit.strip())

print units

# Right now we don't know how to connect fronts to backs, but we're going to say
# if there are any upstream proxies we will turn off forwardedfor
options = ''
proxy_services = glob.glob("/etc/haproxy/*.is.proxy")
if len(proxy_services) == 0:
    options += "    option forwardfor\n"

servers = ''
for unit in units:
    p = subprocess.Popen(["relation-get", "--format", "json", "-", unit],
                         stdout=subprocess.PIPE, close_fds=True)
    settings = json.loads(p.stdout.read().strip())
    p.wait()
    # Add all configured units:
    if 'hostname' in settings and 'port' in settings:
        servers += ("    server %(hostname)s %(hostname)s:%(port)s check\n" % settings)

print servers

# write the haproxy config
with tempfile.NamedTemporaryFile(dir="/etc/haproxy",prefix="haproxy.cfg", delete=False) as conf:
    conf.write((template % service_name) + options + servers)
    try:
        os.unlink("/etc/haproxy/haproxy.cfg.old")
    except:
        pass
    try:
        os.rename("/etc/haproxy/haproxy.cfg","/etc/haproxy/haproxy.old")
    except:
        pass
    try:
      os.rename(conf.name, "/etc/haproxy/haproxy.cfg")
    except:
        os.unlink(conf.name)

# write the pound config
with tempfile.NamedTemporaryFile(dir="/etc/pound",prefix="pound.cfg", delete=False) as conf:
    conf.write((pound_template % service_name))
    try:
        os.unlink("/etc/pound/pound.cfg.old")
    except:
        pass
    try:
        os.rename("/etc/pound/pound.cfg","/etc/pound/pound.old")
    except:
        pass
    try:
      os.rename(conf.name, "/etc/pound/pound.cfg")
    except:
        os.unlink(conf.name)

copy2("/etc/ssl/certs/ssl-cert.pem","/etc/pound/%s.pem" % service_name)

# Just in case haproxy wouldn't start because of empty/bad configs before, start it now
subprocess.call(["service", "haproxy", "start"])
subprocess.call(["service", "haproxy", "reload"])

subprocess.call(["service", "pound", "start"])
subprocess.call(["service", "pound", "force-reload"])

subprocess.call(["open-port", "80"])
subprocess.call(["open-port", "443"])
